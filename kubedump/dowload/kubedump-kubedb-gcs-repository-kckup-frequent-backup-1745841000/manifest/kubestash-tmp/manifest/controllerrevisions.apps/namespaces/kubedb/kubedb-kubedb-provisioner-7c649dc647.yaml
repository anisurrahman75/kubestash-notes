apiVersion: apps/v1
data:
  spec:
    template:
      $patch: replace
      metadata:
        annotations:
          reload: AmHfPlFk
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: kubedb
          app.kubernetes.io/name: kubedb-provisioner
      spec:
        containers:
        - args:
          - operator
          - --v=3
          - --use-kubeapiserver-fqdn-for-aks=true
          - --metrics-bind-address=:8080
          - --health-probe-bind-address=:8081
          - --license-file=/var/run/secrets/appscode/license/key.txt
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: POD_SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.serviceAccountName
          - name: GODEBUG
            value: x509negativeserial=1
          image: ghcr.io/kubedb/kubedb-provisioner:v0.53.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: probes
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1
          name: operator
          ports:
          - containerPort: 8080
            name: metrics
            protocol: TCP
          - containerPort: 8081
            name: probes
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: probes
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65534
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmpdir
          - mountPath: /var/run/secrets/appscode/license
            name: license
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - /bin/sh
          - -c
          - kubectl wait --for=create -n kubedb service -l 'app.kubernetes.io/name=kubedb-webhook-server'
            --timeout=5m && kubectl wait --for=condition=kubedb.com/conversion=true
            -n kubedb pods -l 'app.kubernetes.io/instance=kubedb,app.kubernetes.io/name=kubedb-webhook-server'
            --timeout=5m
          image: ghcr.io/appscode/kubectl-nonroot:1.31
          imagePullPolicy: IfNotPresent
          name: wait
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65534
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kubedb-kubedb-provisioner
        serviceAccountName: kubedb-kubedb-provisioner
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmpdir
        - name: license
          secret:
            defaultMode: 420
            secretName: kubedb-kubedb-provisioner-license
kind: ControllerRevision
metadata:
  annotations:
    meta.helm.sh/release-name: kubedb
    meta.helm.sh/release-namespace: kubedb
  creationTimestamp: "2025-04-28T11:28:31Z"
  labels:
    app.kubernetes.io/instance: kubedb
    app.kubernetes.io/name: kubedb-provisioner
    controller.kubernetes.io/hash: 7c649dc647
  managedFields:
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:data: {}
      f:metadata:
        f:annotations:
          .: {}
          f:meta.helm.sh/release-name: {}
          f:meta.helm.sh/release-namespace: {}
        f:labels:
          .: {}
          f:app.kubernetes.io/instance: {}
          f:app.kubernetes.io/name: {}
          f:controller.kubernetes.io/hash: {}
        f:ownerReferences:
          .: {}
          k:{"uid":"8c2406b9-0e2d-493a-bce6-c06bf3412b6a"}: {}
      f:revision: {}
    manager: kube-controller-manager
    operation: Update
    time: "2025-04-28T11:28:31Z"
  name: kubedb-kubedb-provisioner-7c649dc647
  namespace: kubedb
  ownerReferences:
  - apiVersion: apps/v1
    blockOwnerDeletion: true
    controller: true
    kind: StatefulSet
    name: kubedb-kubedb-provisioner
    uid: 8c2406b9-0e2d-493a-bce6-c06bf3412b6a
  resourceVersion: "59236"
  uid: 5c3f7c9d-64d9-4726-91d1-86f6b7fcccf6
revision: 1
